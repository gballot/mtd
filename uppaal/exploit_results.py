import numpy as np
import pandas as pd
import time
import matplotlib
import matplotlib.pyplot as plt
import sys
from cycler import cycler

##############
# Parameters #
##############

PROBA_LOWER_BOUND = 0.5
NUM_COLORS = 15
XLIM = 1000
YLIM = 2000
experiment = "experiment-2022-04-07_18-08-52no-explore-2"
defenses = ['d_dk', 'd_cp', 'd_cc', 'd_dsr']
defenses_latex = ['t_{d_{dk}}', 't_{d_{cp}}', 't_{d_{cc}}', 't_{d_{dsr}}']

##############

experiment = sys.argv[1] if len(sys.argv) > 1 else experiment

rc_fonts = {
        "text.usetex": True,
        "font.size": 20,
        'mathtext.default': 'regular',
        'axes.titlesize': 30,
        "axes.labelsize": 30,
        "legend.fontsize": 20,
        "xtick.labelsize": 20,
        "ytick.labelsize": 20,
        'figure.titlesize': 25,
        'figure.figsize': (15, 9.3),
        'text.latex.preamble': r'\usepackage{amsmath,amssymb,bm,fontenc}',
        "font.family": "serif",
        "font.serif": "computer modern roman",
    }
matplotlib.rcParams.update(rc_fonts)

defense_periods = [f"t_{defense}" for defense in defenses]
data = pd.read_csv(f"{experiment}/results.csv", na_values="None", skipinitialspace=True)
fastest = data[data["time_limit"].isna()]
cheapest = data[data["cost_limit"].isna()]

common_ax = plt.axes()
cm = plt.get_cmap('gist_rainbow')
common_ax.set_prop_cycle(cycler(color=[cm(1.*i/NUM_COLORS) for i in range(NUM_COLORS)]))

def pareto_frontier(data, proba_lower_bound):
    frontier = pd.DataFrame(columns=["E_time", "E_cost"])
    data = data[data["P_success_inf"] + data["P_success_sup"] >= 2 * proba_lower_bound]
    sorted_data = data.sort_values("E_time")
    while not sorted_data.empty:
        frontier = pd.concat([frontier, sorted_data[["E_time", "E_cost"]].iloc[[0]]])
        sorted_data = sorted_data[sorted_data["E_cost"] < frontier["E_cost"].iloc[-1]]
    #inf_frame = pd.DataFrame([[np.inf, np.inf]], columns=["E_time", "E_cost"])
    inf_frame = pd.DataFrame([[10000, 10000]], columns=["E_time", "E_cost"])
    added_points = pd.concat([inf_frame, frontier, inf_frame])
    added_points = pd.concat([added_points["E_time"].iloc[1:].reset_index(drop=True), added_points["E_cost"].iloc[:-1].reset_index(drop=True)], axis=1)
    return pd.concat([added_points, frontier]).sort_values(["E_time", "E_cost"], ascending=[True, False])



def save_graph(data, path, proba_lower_bound):
    frontier = pareto_frontier(data, proba_lower_bound=proba_lower_bound)
    ax = data.plot.scatter("E_time", "E_cost", c="P_success_sup")
    ax.plot(frontier["E_time"], frontier["E_cost"])
    #ax.figure.set_size_inches(12,8)
    ax.grid()
    ax.set_xlim([0, frontier["E_time"].iloc[-2] * 1.2])
    ax.set_ylim([frontier["E_cost"].iloc[-1] * 0.8, frontier["E_cost"].iloc[1] * 1.2])
    ax.set_xlabel(r"$\mathbb{E}[T]$")
    ax.set_ylabel(r"$\mathbb{E}[C]$")
    #title = ", ".join([f"${defenses_latex[i]} = {data[defense_periods[i]].iloc[0]}$" for i in range(len(defenses))])
    title = ", ".join([f"${defenses_latex[i]} = {data[defense_periods[i]].iloc[0]}$" if data[defense_periods[i]].iloc[0] < 1000 else f"${defenses_latex[i]} = \\infty$" for i in range(len(defenses))])
    ax.set_title(title)
    common_ax.plot(frontier["E_time"], frontier["E_cost"], label=title)
    ax.figure.savefig(path, dpi=100)

for df in data.groupby(list(set(data.columns) - {'time_limit', 'cost_limit', 'E_time', 'E_cost', 'P_success_inf',
       'P_success_sup', 'P_success_confidence', 'time_distribution_low',
       'time_distribution_up', 'time_distribution_hist',
       'cost_distribution_low', 'cost_distribution_up',
       'cost_distribution_hist'})):
    df = df[1]
    defense_periods_values = df[defense_periods].head(1)
    defense_periods_str = '-'.join(defense_periods_values.astype(str).values.flatten())
    save_graph(df, f"{experiment}/fig-{defense_periods_str}.svg", proba_lower_bound=PROBA_LOWER_BOUND)


# Plot all pareto frontiers
NUM_COLORS = len(common_ax.get_lines())
cm = plt.get_cmap('gist_rainbow')
common_ax.set_prop_cycle(cycler(color=[cm(1.*i/NUM_COLORS) for i in range(NUM_COLORS)]))

common_ax.grid()
common_ax.legend()
common_ax.set_xlim([0, XLIM])
common_ax.set_ylim([0, YLIM])
common_ax.set_xlabel(r"$\mathbb{E}[T]$")
common_ax.set_ylabel(r"$\mathbb{E}[C]$")
common_ax.set_title("Comparing the Pareto frontiers")

common_ax.figure.set_size_inches(20,10)
# Shrink current axis by 20%
box = common_ax.get_position()
common_ax.set_position([box.x0, box.y0, box.width * 0.7, box.height])

# Put a legend to the right of the current axis
common_ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))

common_ax.figure.savefig(f"{experiment}/fig-all.svg", dpi=100)
