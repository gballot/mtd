import numpy as np
import pandas as pd
import time
import matplotlib.pyplot as plt

experiment = "experiment-2022-04-07_18-08-52no-explore-2"
defenses = ['t_d_dk', 't_d_cp', 't_d_cc', 't_d_dsr']
data = pd.read_csv(f"{experiment}/results.csv", na_values="None", skipinitialspace=True)
fastest = data[data["time_limit"].isna()]
cheapest = data[data["cost_limit"].isna()]

def pareto_frontier(data, proba_lower_bound):
    frontier = pd.DataFrame(columns=["E_time", "E_cost"])
    data = data[data["P_success_inf"] + data["P_success_sup"] >= 2 * proba_lower_bound]
    sorted_data = data.sort_values("E_time")
    while not sorted_data.empty:
        frontier = pd.concat([frontier, sorted_data[["E_time", "E_cost"]].iloc[[0]]])
        sorted_data = sorted_data[sorted_data["E_cost"] < frontier["E_cost"].iloc[-1]]
    #inf_frame = pd.DataFrame([[np.inf, np.inf]], columns=["E_time", "E_cost"])
    inf_frame = pd.DataFrame([[10000, 10000]], columns=["E_time", "E_cost"])
    added_points = pd.concat([inf_frame, frontier, inf_frame])
    added_points = pd.concat([added_points["E_time"].iloc[1:].reset_index(drop=True), added_points["E_cost"].iloc[:-1].reset_index(drop=True)], axis=1)
    return pd.concat([added_points, frontier]).sort_values(["E_time", "E_cost"], ascending=[True, False])



def save_graph(data, path, proba_lower_bound):
    frontier = pareto_frontier(data, proba_lower_bound=proba_lower_bound)
    ax = data.plot.scatter("E_time", "E_cost", c="P_success_sup")
    ax.plot(frontier["E_time"], frontier["E_cost"])
    ax.figure.set_size_inches(16,10)
    ax.grid()
    ax.set_xlim([0, frontier["E_time"].iloc[-2] * 1.2])
    ax.set_ylim([frontier["E_cost"].iloc[-1] * 0.8, frontier["E_cost"].iloc[1] * 1.2])
    ax.figure.savefig(path, dpi=200)

for df in data.groupby(list(set(data.columns) - {'time_limit', 'cost_limit', 'E_time', 'E_cost', 'P_success_inf',
       'P_success_sup', 'P_success_confidence', 'time_distribution_low',
       'time_distribution_up', 'time_distribution_hist',
       'cost_distribution_low', 'cost_distribution_up',
       'cost_distribution_hist'})):
    df = df[1]
    defense_periods = df[defenses].head(1)
    defense_periods_str = '-'.join(defense_periods.astype(str).values.flatten())
    save_graph(df, f"{experiment}/fig-{defense_periods_str}.svg", proba_lower_bound=0.2)

