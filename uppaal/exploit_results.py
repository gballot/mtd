import numpy as np
import pandas as pd
import time
import matplotlib
import matplotlib.pyplot as plt
import sys
from cycler import cycler

import random

random.seed(10)

##############
# Parameters #
##############

PROBA_LOWER_BOUND = 0
XLIM = 1500
YLIM = 1400
MIN_COST = 0
MIN_TIME = 0
REDUCE_FIGS = 0
SHOW_PROBA = False
FILTER = True
experiment = "experiment-2022-04-07_18-08-52no-explore-2"
defenses = ["d_dk", "d_cp", "d_cc", "d_dsr"]
defenses_latex = ["dk", "cp", "cc", "dsr"]

##############

experiment = sys.argv[1] if len(sys.argv) > 1 else experiment

rc_fonts = {
    "text.usetex": True,
    "font.size": 20,
    "mathtext.default": "regular",
    "axes.titlesize": 30,
    "axes.labelsize": 30,
    "legend.fontsize": 20,
    "xtick.labelsize": 20,
    "ytick.labelsize": 20,
    "figure.titlesize": 25,
    "figure.figsize": (15, 9.3),
    "text.latex.preamble": r"\usepackage{amsmath,amssymb,bm,fontenc}",
    "font.family": "serif",
    "font.serif": "computer modern roman",
}
matplotlib.rcParams.update(rc_fonts)

defense_periods = [f"t_{defense}" for defense in defenses]
data = pd.read_csv(f"{experiment}/results.csv", na_values="None", skipinitialspace=True)
fastest = data[data["time_limit"].isna()]
cheapest = data[data["cost_limit"].isna()]

AMG_attributes = list(
    data.columns.drop(
        [
            "time_limit",
            "cost_limit",
            "E_time",
            "E_cost",
            "P_success_inf",
            "P_success_sup",
            "P_success_confidence",
            "time_distribution_low",
            "time_distribution_up",
            "time_distribution_hist",
            "cost_distribution_low",
            "cost_distribution_up",
            "cost_distribution_hist",
        ]
    )
)

if FILTER:
    data = data[
        # (data[defense_periods] == [100000, 100000, 100000, 100000]).all(axis=1)
        (data[defense_periods] == [15, 300, 1620, 2070]).all(axis=1)
        + (data[defense_periods] == [5, 2700, 540, 2070]).all(axis=1)
        + (data[defense_periods] == [135, 100, 540, 2070]).all(axis=1)
        # + (data[defense_periods] == [135, 900, 540, 230]).all(axis=1)
        + (data[defense_periods] == [405, 300, 180, 690]).all(axis=1)
        + (data[defense_periods] == [45, 300, 1620, 690]).all(axis=1)
        + (data[defense_periods] == [135, 900, 60, 2070]).all(axis=1)
    ]

groups = data.groupby(AMG_attributes, sort=True)

NUM_COLORS = len(groups) - len(groups) % REDUCE_FIGS if REDUCE_FIGS > 0 else len(groups)

common_ax = plt.axes()
cm = plt.get_cmap("gist_rainbow")
# common_ax.set_prop_cycle(
#    cycler(color=[cm(1.0 * i / NUM_COLORS) for i in range(NUM_COLORS)])
# )


def pareto_frontier(data, proba_lower_bound):
    frontier = pd.DataFrame(columns=["E_time", "E_cost"])
    data = data[data["P_success_inf"] + data["P_success_sup"] >= 2 * proba_lower_bound]
    sorted_data = data.sort_values("E_time")
    while not sorted_data.empty:
        frontier = pd.concat([frontier, sorted_data[["E_time", "E_cost"]].iloc[[0]]])
        sorted_data = sorted_data[sorted_data["E_cost"] < frontier["E_cost"].iloc[-1]]
    # inf_frame = pd.DataFrame([[np.inf, np.inf]], columns=["E_time", "E_cost"])
    inf_frame = pd.DataFrame([[100000, 100000]], columns=["E_time", "E_cost"])
    added_points = pd.concat([inf_frame, frontier, inf_frame])
    added_points = pd.concat(
        [
            added_points["E_time"].iloc[1:].reset_index(drop=True),
            added_points["E_cost"].iloc[:-1].reset_index(drop=True),
        ],
        axis=1,
    )
    return pd.concat([added_points, frontier]).sort_values(
        ["E_time", "E_cost"], ascending=[True, False]
    )


def save_graph(data, path, proba_lower_bound):
    frontier = pareto_frontier(data, proba_lower_bound=proba_lower_bound)
    if SHOW_PROBA:
        ax = data.plot.scatter(
            "E_time", "E_cost", c="P_success_sup", label="Strategy exploiration"
        )
    else:
        ax = data.plot.scatter("E_time", "E_cost", label="Stretegy exploration")
    ax.plot(frontier["E_time"], frontier["E_cost"], label="Pareto frontier")
    # ax.figure.set_size_inches(12,8)
    common_ax.figure.set_size_inches(20, 12)
    ax.grid()
    ax.set_xlim([0, frontier["E_time"].iloc[-2] * 1.2])
    ax.set_ylim([frontier["E_cost"].iloc[-1] * 0.8, frontier["E_cost"].iloc[1] * 1.2])
    ax.set_xlabel(r"$\mathbb{E}[\hat{T}]$")
    ax.set_ylabel(r"$\mathbb{E}[\hat{C}]$")
    # title = ", ".join([f"${defenses_latex[i]} = {data[defense_periods[i]].iloc[0]}$" for i in range(len(defenses))])
    title = ", ".join(
        [
            f"{defenses_latex[i]} \\to {data[defense_periods[i]].iloc[0]}"
            if data[defense_periods[i]].iloc[0] < 100000
            else f"{defenses_latex[i]} \\to \\infty"
            for i in range(len(defenses))
        ]
    )
    # title = ", ".join([f"${data[defense_periods[i]].iloc[0]}$" if data[defense_periods[i]].iloc[0] < 5000 else f"$\\infty$" for i in range(len(defenses))])
    defense_values = ", ".join(
        [
            f"{data[defense_periods[i]].iloc[0]}"
            if data[defense_periods[i]].iloc[0] < 100000
            else f"\\infty"
            for i in range(len(defenses))
        ]
    )
    ax.legend(loc="lower left", ncol=1)
    ax.set_title(f"Defense periods: ${title}$")
    # ax.set_title(title)
    if frontier["E_time"].min() > MIN_TIME and frontier["E_cost"].min() > MIN_COST:
        common_ax.plot(
            frontier["E_time"], frontier["E_cost"], label=f"${defense_values}$"
        )
    ax.figure.savefig(path, dpi=600, bbox_inches="tight")


pass_count = 0
for df in groups:
    pass_count += 1
    pass_count = pass_count % REDUCE_FIGS if REDUCE_FIGS > 0 else pass_count
    if pass_count == 0:
        continue
    df = df[1]
    defense_periods_values = df[defense_periods].head(1)
    defense_periods_str = "-".join(defense_periods_values.astype(str).values.flatten())
    save_graph(
        df,
        f"{experiment}/fig-{defense_periods_str}.png",
        proba_lower_bound=PROBA_LOWER_BOUND,
    )


# Plot all pareto frontiers
common_ax.grid()
common_ax.set_xlim([0, XLIM])
common_ax.set_ylim([0, YLIM])
common_ax.set_xlabel(r"$\mathbb{E}[\hat{T}]$")
common_ax.set_ylabel(r"$\mathbb{E}[\hat{C}]$")
# common_ax.set_title("Comparing the Pareto frontiers")

common_ax.figure.set_size_inches(20, 12)
# Shrink current axis by 20%
# box = common_ax.get_position()
# common_ax.set_position([box.x0, 3.5 * box.y0, box.width, box.height * 0.7])

# Put a legend to the right of the current axis
# common_ax.legend(loc='center left', bbox_to_anchor=(0.17, -0.2), ncol=3, title=f"Defense periods for $({', '.join(defenses_latex)})$")
common_ax.legend(
    loc="lower left",
    ncol=1,
    title=f"Defense periods for $({', '.join(defenses_latex)})$",
)

common_ax.figure.savefig(f"{experiment}/fig-all.png", dpi=600, bbox_inches="tight")
